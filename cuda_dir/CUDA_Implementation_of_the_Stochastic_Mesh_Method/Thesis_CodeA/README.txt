Code Description:
The files main.cu, cuda_mesh_generation.cu, convert_to_array.cpp, cuda_mesh_estimator.cu, cuda_path_estimator.cu, index.cpp, one_dim_results.cpp, cuda_mesh_weights.cu collectively implement the stochastic mesh method for pricing multidimensional Bermudan options in a CUDA framework. The input parameters are specified in settings.txt. The cuda_mesh_generation.cu file generates the nodes of the stochastic mesh and the file, cuda_mesh_weights.cu generates the mesh weights. The file cuda_mesh_estimator.cu generates the high bias option value and the file cuda_path_estimator.cu generates the low bias option value. The file main.cu contains the main function which reads in the input parameters, initialises the random seeds on the GPU threads, and performs the final calculation of confidence intervals.

Input Parameters:
The input parameters can be specified in the file settings.txt. An example input is given below for the case of a 5 dimensional option with starting value S=100 where S_0=(S,..,S). In this example, the risk free interest rate is 0.03, the dividend yield for each underlying asset is 0.05, the volatility of each underlying asset is 0.4, the strike price is 100$ and the amounts of each asset are equally set to 0.2. The sum of the amounts of each asset must sum to 1 otherwise the program will return a warning error.The number of path estimator iterations is taken to be 10 times the number of nodes per time step. We do this to ensure the standard errors of the low and high bias estimators are of the same magnitude as the method converges to the true value. In the example below, the mesh is replicated 5 times.

Example: settings.txt

	The starting price (dollars)=
	100,100,100,100,100
	The time to expiry (years)=
	1
	The number of time intervals=
	10
	The risk free rate of interest=
	0.03
	The dividend yeild=
	0.05,0.05,0.05,0.05,0.05
	The volatility=
	0.4,0.4,0.4,0.4,0.4
	The number of times we iterated over the path estimator=
	8000
	The strike price (dollars)=
	100
	The number of nodes per time step=
	800
	The number of times we run the programme=
	5
	1-alpha/2 quantile of the standard normal distribution N(0,1)=
	1.64
	Number of underlying assets=
	5
	Amounts of each asset=
	0.2,0.2,0.2,0.2,0.2


Compilation:
To compile each program enter 'make' in the terminal command line. The Makefile contains the compilation commands. To delete the object files type 'make clean'.

Execution:
To run the executable generated by the Makefile, enter './executable' in the command line.

Output:
The executable will output the results obtained from each mesh replication to the terminal along with the final results for both the high and low bias estimators. It will also output the results to the file 'results.txt'. The data written into 'results.txt' is organised by the following columns, 'Number of Mesh Replications', 'Number of Nodes at Each Time Step', 'Number of Path Estimator Iterations', 'Starting Value of the First Asset', 'Low Bias Estimate', 'Standard Error of Low Bias Estimate', 'High Bias Estimate', 'Standard error of High Bias Estimate', 'Low Confidence Interval Bound', 'High Confidence Interval Bound', 'Point Estimate', 'Estimated Error', 'Elapsed Time'.

Matlab Code:
The Matlab code produce by Dr. Anita Faul is also included in this folder under the file name 'cnfdamput.m'. This Matlab routine generates the value surface for American put options using the Crank Nicolson finite difference method.

Plots:
The files OneDimPayoff.py, plotConvergence.py, PlotStockSimulation.py, can be used to produce plots of 1-dimensional option high bias mesh node values, the convergence of the stochastic mesh method and stock price simulations for the one dimensional case respectively. The file OneDimPayoff.py plots data from the file OneDimHighPayoff.txt which is produced by the 'print_high_payoff' function in the file one_dim_results.cpp. The file plotConvergence.py plots data from results.txt for a given option with various mesh parameters (b,n_p). To produce multiple rows in 'results.txt' for the same option,  run the main executable for various (b,n_p) values. The file PlotStockSimulation.py plots data from the file stocksimulation.txt. It produces plots of the simulated stock prices used for the independent path construction.    

Remarks:
It is worth noting that using mesh parameters generally greater then (b,n_p)=(3200,32000) will result in GPU memory errors. This is due to the 2G memory threshold of the GPU. We also note that if the routine is run on a GPU which also controls the computer display, timeout errors resulting from the path estimator kernel might be an issue when pricing high dimensional options. This is due to the kernel timeout value set by default by the computer's operating system. For example, using mesh parameters (1600,16000) timeout errors migh occur for options with dimension > 30.

For performance reasons we redeclare device functions in each .cu file. We found a reduction in runtime performance when declaring device functions in separate files and linking through the -dc compilation flag. The reduced performance might be explained by the fact that 'separate compilation' features are relatively new to CUDA. 

The two payoff functions included in our implementation are the geometric average call and geometric average put payoffs. By call payoff is set by default. To change this, change the payoff function calls in cuda_mesh_estimator.cu and cuda_path_estimator.cu. 
